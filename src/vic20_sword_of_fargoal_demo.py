import basicVarAnalysis


def vic20_sword_of_fargoal_test():
    mem = basicVarAnalysis.MemoryDump('VIC20+8K+')
    mem.find_vars("test_files/vic20_SOF.bin")

    mem.add_formatting("A",  comment = "char for player graphic")
    mem.add_formatting("A$", comment = "keyboard input")
    mem.add_formatting("A1", comment = "counter to balance key input with monster movement")
    mem.add_formatting("B",  comment = "joystick direction") 
    mem.add_formatting("BG", comment = "count of magic sacks in inventory")
    mem.add_formatting("BS", comment = "battle skill")
    mem.add_formatting("C",  comment = "a screen character")
    mem.add_formatting("CL", comment = "1 = trap sprung, 0 = evaded")  
    mem.add_formatting("CM", comment = "an offset used for color memory")  
    mem.add_formatting("D%", comment = "the constant 506 (= 22 * 23 screen locations)")  
    mem.add_formatting("DD", comment = "VIA2 DDR register")      
    mem.add_formatting("DE", comment = "deepest level reached")
    mem.add_formatting("E",  comment = "experience points")
    mem.add_formatting("EL", comment = "experience level")            
    mem.add_formatting("FA", comment = "count of drift spells in inventory")
    mem.add_formatting("F3", comment = "used to keep opponent from getting stuck when moving")
    mem.add_formatting("FL", comment = "1 if leaving a fight via teleport spell")      
    mem.add_formatting("FR", comment = "joystick fire button")      
    mem.add_formatting("GD", comment = "gold bury count for level (0 to 9)")       
    mem.add_formatting("HP", comment = "count of healing potions in inventory")
    mem.add_formatting("HT", comment = "hit points")    
    mem.add_formatting("IV", comment = "count of invisibility spells in inventory")
    mem.add_formatting("K",  comment = "value at a screen location under player") 
    mem.add_formatting("L",  comment = "current dungeon level")       
    mem.add_formatting("L1", comment = "current light spell: 0=none, 1=on, 2=off")    
    mem.add_formatting("LG", comment = "count of light spells in inventory")
    mem.add_formatting("M",  comment = "a memory address")
    mem.add_formatting("M2", comment = "0 if opponent is monster, 1 if human-like")    
    mem.add_formatting("MK", comment = "count of opponents killed")    
    mem.add_formatting("N1", comment = "oscillator 1 freq register")
    mem.add_formatting("N2", comment = "oscillator 2 freq register")
    mem.add_formatting("N3", comment = "oscillator 3 freq register")
    mem.add_formatting("N4", comment = "noise freq register")
    mem.add_formatting("NM", comment = "number of non-human opponents on level")    
    mem.add_formatting("NN", comment = "number of human-like opponents on level")
    mem.add_formatting("O",  comment = "screen memory offset")  
    mem.add_formatting("PA", comment = "port A (for joystick reads)")
    mem.add_formatting("PB", comment = "port B (for joystick reads)")
    mem.add_formatting("PL", comment = "enchanted weapon level")    
    mem.add_formatting("QL", comment = "dungeon level that contains the sword of fargoal")        
    mem.add_formatting("R1", comment = "regeneration rate")
    mem.add_formatting("R2", comment = "1 = player in temple, 0 if not")      
    mem.add_formatting("RG", comment = "count of regenerate spells in inventory")
    mem.add_formatting("S",  comment = "monster speed")
    mem.add_formatting("SF", comment = "1 if sword of fargoal in inventory")   
    mem.add_formatting("SH", comment = "count of shield spells in inventory")
    mem.add_formatting("SR", comment = "start-of-game indicator")
    mem.add_formatting("T",  comment = "gold in inventory")
    mem.add_formatting("T3", comment = "game timer after sword found")
    mem.add_formatting("T4", comment = "total game time")
    mem.add_formatting("TH", comment = "maximum hit points")  
    mem.add_formatting("TM", comment = "number of maps in inventory")        
    mem.add_formatting("TP", comment = "count of teleport spells in inventory")
    mem.add_formatting("V1", comment = "1 if player is invisible, 0 if not")
    mem.add_formatting("V2", comment = "volume")
    mem.add_formatting("V3", comment = "computed values for sound effects")  
    mem.add_formatting("X1", comment = "opponent skill divided by player's battle skill")

    mem.add_formatting("A$()", comment = 'monster "A"s or "AN"s')
    mem.add_formatting("B$()", comment = "monster names")    
    mem.add_formatting("B%()", comment = "human-likes' hit points")
    mem.add_formatting("C$()", comment = 'human-like "A"s or "AN"s')    
    mem.add_formatting("D()",  comment = "22-col direction offsets")
    mem.add_formatting("D$()", comment = "human-like names")     
    mem.add_formatting("G%()", comment = "piles of buried gold (up to 10)")        
    mem.add_formatting("H%()", comment = "monsters' hit points")
    mem.add_formatting("J%()", comment = "joystick screen-offset decoding for x,y")
    mem.add_formatting("M%()", comment = "monster-likes' locations")      
    mem.add_formatting("N%()", comment = "human-likes' locations")    
    mem.add_formatting("R%()", comment = "human-likes' skill levels")
    mem.add_formatting("S$()", comment = "monster battle sounds")             
    mem.add_formatting("S%()", comment = "monsters' skill levels")
    mem.add_formatting("T$()", comment = "human-likes battle sounds")      
    mem.add_formatting("T%()", comment = "list of up to 10 level maps (unsorted)")
    mem.add_formatting("V()",  comment = "constants used in random dungeon creation")
    mem.add_formatting("V%()", comment = "sound data")
    mem.add_formatting("W%()", comment = "sound data")
    mem.add_formatting("X()",  comment = "character to display for monster types")
    mem.add_formatting("Y()",  comment = "character to display for human-like types")
    mem.add_formatting("X$()", comment = "monster descriptions for level")              
    mem.add_formatting("X%()", comment = "sound data")
    mem.add_formatting("Y$()", comment = "human-like descriptions for level")      
    mem.add_formatting("Y%()", comment = "sound data")           
    mem.add_formatting("Z%()", comment = "sound data") 

    mem.print_basic_ranges()
    mem.print_variables()    
    return mem


if __name__ == "__main__":
    mem = vic20_sword_of_fargoal_test()
